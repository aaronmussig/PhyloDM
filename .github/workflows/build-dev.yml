name: Version, build, publish

on:
  push:
    branches:
      - dev

jobs:
#
#  semantic_release_next_version:
#    name: Next version
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/setup-node@v4
#        with:
#          cache: npm
#          node-version: lts/Iron
#      - run: npm install
#      - run: npx semantic-release --dry-run
#        id: semantic_release
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      - uses: actions/upload-artifact@v4
#        with:
#          name: semantic-release-dev
#          path: |
#            Cargo.toml
#            pyproject.toml
#          retention-days: 1
#    outputs:
#      version: ${{ steps.semantic_release.outputs.version }}
#
#  test_rust:
#    name: Build Rust
#    needs: semantic_release_next_version
#    if: needs.semantic_release_next_version.outputs.version != ''
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions-rust-lang/setup-rust-toolchain@v1
#        with:
#          toolchain: stable
#      - run:
#            cargo test --release --all-features


  build_linux:
#    needs: test_rust
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
        python-version:
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'
    steps:
      - uses: actions/checkout@v4
#      - uses: actions/download-artifact@v4
#        with:
#          name: semantic-release-dev
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build wheel
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist -j 1 --all-features --strip --interpreter python${{ matrix.python-version }}
          sccache: 'true'
          manylinux: auto
      - name: Test wheel
        run: |
          echo "((A:1,B:2):1,(C:1,(D:3,E:4):2):2);" > test.tree
          python -m pip install dendropy
          python -m pip install dist/*.whl --force-reinstall
          python -c "from phylodm import PhyloDM; PhyloDM.load_from_newick_path('test.tree')"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.runner }}-${{ matrix.platform.target }}-${{ matrix.python-version }}
          path: dist
          retention-days: 1

#
#  build_python_wheels:
#    name: Python ${{ matrix.pyver }}@${{ matrix.os }}.whl
#    needs: semantic_release_next_version
#    if: needs.semantic_release_next_version.outputs.version != ''
#    runs-on: ${{ matrix.os }}
#    strategy:
#      matrix:
#        os: [ubuntu-20.04, macos-11]
#        pyver: [cp38, cp39, cp310, cp311]
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/download-artifact@v4
#        with:
#          name: semantic-release-dev
#      - uses: pypa/cibuildwheel@v2.10.0
#        env:
#          CIBW_BUILD: ${{matrix.pyver}}-*
#      - uses: actions/upload-artifact@v3
#        with:
#          name: pypi
#          path: wheelhouse/*.whl
#          retention-days: 1
#
#  build_python_dist:
#    name: Python build *.tar.gz
#    runs-on: ubuntu-latest
#    needs: semantic_release_next_version
#    if: needs.semantic_release_next_version.outputs.version != ''
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/download-artifact@v3
#        with:
#          name: semantic-release-dev
#      - name: Build sdist
#        run: pipx run build --sdist
#      - uses: actions/upload-artifact@v3
#        with:
#          name: pypi
#          path: dist/*.tar.gz
#          retention-days: 1
#
#  test_python_dist:
#    name: Python test *.tar.gz
#    runs-on: ubuntu-latest
#    needs: build_python_dist
#    steps:
#      - uses: actions-rs/toolchain@v1
#        with:
#          toolchain: stable
#      - uses: actions/download-artifact@v3
#        with:
#          name: pypi
#          path: dist
#      - uses: actions/setup-python@v4
#        with:
#          python-version: '3.10'
#      - run: echo "((A:1,B:2):1,(C:1,(D:3,E:4):2):2);" > test.tree
#      - run: python -m pip install dendropy
#      - run: python -m pip install dist/*.tar.gz
#      - run: python -c "from phylodm import PhyloDM; PhyloDM.load_from_newick_path('test.tree')"
#
#  semantic_release_publish:
#    name: Publish to GitHub
#    needs: [test_rust, test_python_dist, build_python_wheels]
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/setup-node@v3
#        with:
#          cache: npm
#          node-version: 16
#      - run: npm install
#      - run: npx semantic-release
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#  upload_pypi:
#    name: Publish to PyPI
#    needs: [semantic_release_publish]
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/download-artifact@v3
#        with:
#          name: pypi
#          path: dist
#
#      - uses: pypa/gh-action-pypi-publish@release/v1
#        with:
#          user: __token__
#          password: ${{ secrets.PYPI_TOKEN }}
#
#  upload_crates:
#    name: Publish to crates.io
#    needs: [semantic_release_publish]
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - uses: actions/download-artifact@v3
#        with:
#          name: semantic-release-dev
#      - uses: actions-rs/toolchain@v1
#        with:
#          toolchain: stable
#      - run: cargo publish --allow-dirty --token ${CRATES_TOKEN}
#        env:
#          CRATES_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

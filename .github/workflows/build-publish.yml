name: Version, build, publish

on:
  push:
    branches:
      - main

jobs:

  semantic_release_next_version:
    name: Next version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: lts/Iron
      - run: npm install
      - run: npx semantic-release --dry-run
        id: semantic_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/upload-artifact@v4
        with:
          name: semantic-release
          path: |
            Cargo.toml
            pyproject.toml
            CITATION.cff
          retention-days: 1
    outputs:
      version: ${{ steps.semantic_release.outputs.version }}

  test_rust:
    name: Test Rust
    needs: semantic_release_next_version
    if: needs.semantic_release_next_version.outputs.version != ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      - run:
          cargo test --release --all-features

  build_linux:
    needs: test_rust
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
        python-version:
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: semantic-release
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build wheel
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist -j 1 --all-features --strip --interpreter python${{ matrix.python-version }}
          sccache: 'true'
          manylinux: auto
      - name: Test wheel
        run: |
          echo "((A:1,B:2):1,(C:1,(D:3,E:4):2):2);" > test.tree
          python -m pip install dendropy
          python -m pip install dist/*.whl --force-reinstall
          python -c "from phylodm import PhyloDM; PhyloDM.load_from_newick_path('test.tree')"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.runner }}-${{ matrix.platform.target }}-${{ matrix.python-version }}
          path: dist
          retention-days: 1

  musllinux:
    needs: test_rust
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
        python-version:
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: semantic-release
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build wheel
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist -j 1 --all-features --strip --interpreter python${{ matrix.python-version }}
          sccache: 'true'
          manylinux: musllinux_1_2
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.platform.runner }}-${{ matrix.platform.target }}-${{ matrix.python-version }}
          path: dist
          retention-days: 1


  windows:
    needs: test_rust
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
        python-version:
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: semantic-release
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build wheel
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist -j 1 --all-features --strip --interpreter python${{ matrix.python-version }}
          sccache: 'true'
      - name: Test wheel
        run: |
          echo "((A:1,B:2):1,(C:1,(D:3,E:4):2):2);" > test.tree
          python -m pip install dendropy
          python -m pip install (get-item .\dist\*.whl) --force-reinstall
          python -c "from phylodm import PhyloDM; PhyloDM.load_from_newick_path('test.tree')"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.runner }}-${{ matrix.platform.target }}-${{ matrix.python-version }}
          path: dist
          retention-days: 1

  osx:
    needs: test_rust
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - runner: macos-12
            target: x86_64
          - runner: macos-14
            target: aarch64
        python-version:
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: semantic-release
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build wheel
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist -j 1 --all-features --strip --interpreter python${{ matrix.python-version }}
          sccache: 'true'
      - name: Test wheel
        run: |
          echo "((A:1,B:2):1,(C:1,(D:3,E:4):2):2);" > test.tree
          python -m pip install dendropy
          python -m pip install dist/*.whl --force-reinstall
          python -c "from phylodm import PhyloDM; PhyloDM.load_from_newick_path('test.tree')"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-osx-${{ matrix.platform.runner }}-${{ matrix.platform.target }}-${{ matrix.python-version }}
          path: dist
          retention-days: 1

  sdist:
    needs: test_rust
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: semantic-release
      - name: Build wheel
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
      - name: Test dist
        run: |
          echo "((A:1,B:2):1,(C:1,(D:3,E:4):2):2);" > test.tree
          python -m pip install dendropy
          python -m pip install dist/*.tar.gz --force-reinstall
          python -c "from phylodm import PhyloDM; PhyloDM.load_from_newick_path('test.tree')"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist
          retention-days: 1

  semantic_release_publish:
    name: Publish to GitHub
    needs: [build_linux, musllinux, windows, osx, sdist]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: lts/Iron
      - run: npm install
      - run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  upload_pypi:
    name: Publish to PyPI
    needs: [semantic_release_publish]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/phylodm
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: wheels-*
          merge-multiple: true
      - uses: pypa/gh-action-pypi-publish@release/v1

  upload_crates:
    name: Publish to crates.io
    needs: [semantic_release_publish]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: semantic-release
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      - run: cargo publish --allow-dirty --token ${CRATES_TOKEN}
        env:
          CRATES_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
